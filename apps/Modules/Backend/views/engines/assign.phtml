<!-- Block header -->
<div id="dashboard-header" class="row">
    <div class="col-xs-10 col-sm-4">
        <h3><i class="fa fa-edit fa-md"></i> <b><?= $title; ?></b></h3>
    </div>
</div>
<div class="clearfix"></div>
<!-- /Block header -->

<!-- Block content -->
<div class="row">
    <div class="col-xs-12">
        <div class="box-conten no-padding">
            <!-- Add Engine form -->
            <?= $this->tag->form(['id' => 'add-engine', 'class' => 'form-horizontal', 'method' => 'post']); ?>
            <div class="form-group">
                <label for="name" class="control-label col-sm-3">Name</label>

                <div class="col-sm-6">
                    <?= $form->render('name', [
                        'placeholder' => 'Input engine name',
                        'class' => 'form-control',
                        'maxlength'     => '40',
                    ]); ?>
                </div>
            </div>

            <div class="form-group">
                <label for="description" class="control-label col-sm-3">Description</label>

                <div class="col-sm-6">
                    <?= $form->render('description', [
                        'class' => 'col-sm-5 form-control',
                    ]); ?>
                </div>
            </div>

            <div class="form-group">
                <label for="host" class="control-label col-sm-3">Host</label>

                <div class="col-sm-6">
                    <?= $form->render('host', [
                        'placeholder' => 'Input host name',
                        'class' => 'col-sm-5 form-control',
                        'maxlength' => '40',
                    ]); ?>
                </div>
            </div>

            <div class="form-group">
                <label for="code" class="control-label col-sm-3">Code</label>

                <div class="col-sm-6">
                    <?= $form->render('code', [
                        'placeholder' => 'Code like short name',
                        'class' => 'col-sm-5 form-control',
                        'maxlength' => '3',
                    ]); ?>
                </div>
            </div>

            <div class="form-group">
                <label for="currency_id" class="control-label col-sm-3">Currency</label>

                <div class="col-sm-6">
                    <?= $form->render('currency_id', [
                        'class' => 'populate placeholder',
                        'width' => '40'
                    ]); ?>
                </div>
            </div>

            <div class="form-group">
                <label for="status" class="control-label col-sm-3">Status</label>

                <div class="col-sm-6">
                    <?= $form->render('status', [
                        'class' => 'populate placeholder'
                    ]); ?>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-3"></div>
                <div class="col-sm-6 ">
                    <?= $form->render('save', ['value' => 'Save', 'class' => 'btn btn-primary btn-lg btn-block']); ?>
                </div>
            </div>
            </form>
            <!-- /Add Engine form -->
        </div>
    </div>
</div>
<?= $this->tag->javascriptInclude("assets/plugins/store/store.min.js", true);  // local ?>
<!-- Block content -->
<script type="text/javascript">
    $(document).ready(function () {

        if(!store.enabled) {
            Common.alert('Local storage is not supported by your browser. Please disable "Private Mode", or upgrade to a modern browser.')
            return;
        }
        else
        {

            var add = store.get('add-engine');

            var fields = $('form#add-engine input[type=text], form#add-engine textarea');

            if(typeof add !== typeof undefined)
            {
                $.each(fields, function(i) {

                   var input = $(this);
                   var	attr = input.attr('name');

                    $.each(add, function(i, v) {

                        if(typeof attr !== typeof undefined && attr !== false) {
                            if(attr === v.name)
                                input.val(v.value);
                        }
                    });
                });
            }

            // serialize to storage

            $('#save').on('click', function(e) {
                store.remove('add-engine');
                store.set('add-engine', $('form#add-engine').serializeArray());
            });
        }

        // Create Wysiwig editor for textare
        TinyMCEStart('#description', null);

        // styling selects
        LoadSelect2Script(function () {
            $('#currency_id, #status').select2();
        });

        // Load  form validation
        LoadBootstrapValidatorScript(
            $('#add-engine').bootstrapValidator({
                feedbackIcons: {
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh'
                },
                message: 'This value is not valid',
                fields: {
                    name: {
                        message: 'The name is not valid',
                        validators: {
                            notEmpty: {
                                message: 'The name is required and can\'t be empty'
                            },
                            stringLength: {
                                min: 3,
                                max: '40',
                                message: 'The name must be more than 3 and less than 40 characters long'
                            },
                            regexp: {
                                regexp: /^[a-zA-Z0-9_\. ]+$/,
                                message: 'The name can only consist of alphabetical, number, dot, underscore and space'
                            }
                        }
                    },
                    currency_id: {
                        validators: {
                            notEmpty: {
                                message: 'The currency is required and can\'t be empty'
                            }
                        }
                    },
                    status: {
                        validators: {
                            notEmpty: {
                                message: 'The status is required and can\'t be empty'
                            }
                        }
                    },
                    host: {
                        message: 'The host is not valid',
                        validators: {
                            notEmpty: {
                                message: 'The host is required and can\'t be empty'
                            },
                            stringLength: {
                                min: 3,
                                max: '40',
                                message: 'The host must be more than 3 and less than 40 characters long'
                            }
                        }
                    },
                    code: {
                        message: 'The code is not valid',
                        validators: {
                            notEmpty: {
                                message: 'The code is required and can\'t be empty'
                            },
                            stringLength: {
                                min: 3,
                                max: 3,
                                message: 'The host must be 3 characters long'
                            }
                        }
                    }
                }
            })
        );
    });
</script>